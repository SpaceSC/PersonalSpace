openapi: 3.0.0
info:
  title: Personal Space
  description: This is the documentation for Personal Space API. In the project, they will need to store and handle users, albums, and images and will have a simple user authentication system (registration, login, logout).
  version: 0.1.9
servers:
  - url: http://localhost:5000/api
    description: Main (production) server
security:
  - BearerAuth: []
paths:
  "/test":
    get:
      summary: Returns a test message
      tags:
        - Test
      security: []
      description: Returns a test message.
      responses:
        "200":    # status code
          description: A JSON with a message
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Message"
              examples: 
                My test endpoint:
                  value:
                      message: My test endpoint
        "500":    # status code
          $ref: "#/components/responses/InternalServerError"              
  "/error-test":
    get:
      summary: Returns an error message with status 500
      tags:
        - Test
      security: []
      description: Returns an Internal server error message with status 500.
      responses:
        "500":    # status code
          $ref: "#/components/responses/InternalServerError"
  "/random-fact":
    get:
      summary: Returns a random space fact
      tags:
        - Random Fact
      description: Returns a random space fact.
      responses:
        "200":    # status code
          description: A random fact
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RandomFact"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/FactNotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
  "/apod":
    get:
      summary: Returns NASA APOD
      tags:
        - APOD
      description: Returns NASA Astronomy Picture Of the Day.
      responses:
        "200":    # status code
          description: NASA APOD
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Apod'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":    # status code
          $ref: '#/components/responses/ServiceNotAvailable'
  "/apod/{date}":
    get:
      summary: Returns NASA APOD by date
      tags:
        - APOD
      description: Returns NASA Astronomy Picture Of the Day by date.
      parameters:
        - name: date
          in: path # the route parameter in this case
          required: true
          schema:
            type: string
      responses:
        "200":    # status code
          description: NASA APOD
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Apod'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":    # status code
          $ref: '#/components/responses/ServiceNotAvailable'
  "/random-apod":
    get:
      summary: Returns random NASA APOD
      tags:
        - APOD
      description: Returns random NASA Astronomy Picture Of the Day.
      responses:
        "200":    # status code
          description: NASA APOD
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Apod'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":    # status code
          $ref: '#/components/responses/ServiceNotAvailable'
  "/login":
    post:
      summary: Google login
      tags:
        - User
      security: []
      requestBody:
        description: Login to application with a Google account.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code: 
                  type: string
                  description: Google auth code query string from the url [See documentation](https://developers.google.com/identity/protocols/oauth2/openid-connect#exchangecode)
      responses:
        "200":
          description: Successful login
          content:
            application/json:
              schema: 
                type: object
                properties:
                  token:
                    type: string
                    description: Google auth code query string from the url [See documentation](https://developers.google.com/identity/protocols/oauth2/openid-connect#exchangecode)
                  apiStatuses:
                    type: object
                    description: User's api statuses
                    properties:
                      iss_current_location:
                        type: boolean
                        description: Iss toggle status
                      people_in_space:
                        type: boolean
                        description: People in space toggle status
                      space_x:
                        type: boolean
                        description: Space x toggle status
                      apod:
                        type: boolean
                        description: Apod toggle status
                      planet_data:
                        type: boolean
                        description: Planet data toggle status
                      mars_photo:
                        type: boolean
                        description: Mars photos toggle status
                      random_fact:
                        type: boolean
                        description: Random fact toggle status
                  username:
                    type: string
                    description: Username
        "400":    # status code
          description: Invalid code
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Message"
              examples: 
                Invalid code:
                  value:
                      message: Invalid code
        "500":
          $ref: '#/components/responses/InternalServerError'
  "/user-list":
    get:
      summary: Returns NASA APOD
      tags:
        - User
      description: Returns NASA Astronomy Picture Of the Day.
      responses:
        "200":    # status code
          description: NASA APOD
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Apod'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "500":
          $ref: '#/components/responses/InternalServerError'
  # /check-logged-in:
  #   get:
  #     summary: Add a new user as admin
  #     tags:
  #       - User
  #     requestBody:
  #       description: New user object that you would like to store.
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/User'
  #     responses:
  #       201:
  #         description: New user stored in database.
  #         content:
  #           application/json:
  #             schema: 
  #               $ref: '#/components/schemas/User'
  #       400:    # status code
  #         description: Invalid username
  #         content:
  #           application/json:
  #             schema: 
  #               type: object
  #               properties:
  #                 message: 
  #                   type: string
  #             examples:
  #               InvalidUsername: 
  #                 value: 
  #                   message: Invalid username
  #               NotUniqueUsername: 
  #                 value: 
  #                   message: Username must be unique
  
  /delete-account:
    delete:
      summary: Returns NASA APOD
      tags:
        - User
      description: Returns NASA Astronomy Picture Of the Day.
      responses:
        "200":    # status code
          description: NASA APOD
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Apod'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "500":
          $ref: '#/components/responses/InternalServerError'
  # /delete-account/{id}:
  #   delete:
  #     summary: Returns NASA APOD
  #     tags:
  #       - User
  #     description: Returns NASA Astronomy Picture Of the Day.
  #     responses:
  #       "200":    # status code
  #         description: NASA APOD
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Apod'
  #       "401":
  #         $ref: '#/components/responses/Unauthorized'
  #       "500":
  #         $ref: '#/components/responses/InternalServerError'
      
  /set-username:
    post:
      summary: Add a new user as admin
      tags:
        - User
      requestBody:
        description: New user object that you would like to store.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: New user stored in database.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/User'
        400:    # status code
          description: Invalid username
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message: 
                    type: string
              examples:
                InvalidUsername: 
                  value: 
                    message: Invalid username
                NotUniqueUsername: 
                  value: 
                    message: Username must be unique
  /toggle-api-status:
    patch:
      summary: Add a new user as admin
      tags:
        - User
      requestBody:
        description: New user object that you would like to store.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: New user stored in database.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/User'
        400:    # status code
          description: Invalid username
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message: 
                    type: string
              examples:
                InvalidUsername: 
                  value: 
                    message: Invalid username
                NotUniqueUsername: 
                  value: 
                    message: Username must be unique
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  schemas:
    User:
      type: object
      properties:
        username:
          type: string
          example: "Jane Doe"
    Apod:
      type: object
      properties:
        _id:
          type: string
          example: "6126376ec1ddf01e20797a81"
        date: 
          type: string
          example: "1995-06-20"
        explanation: 
          type: string
          example: "Today's Picture: June 20, 1995    The Pleiades Star Cluster  Picture Credit: Mount Wilson Observatory  Explanation:  The Pleiades star cluster, M45, is one of the brightest star clusters visible in the northern hemisphere. It consists of many bright, hot stars that were all formed at the same time within a large cloud of interstellar dust and gas. The blue haze that accompanies them is due to very fine dust which still remains and preferentially reflects the blue light from the stars.   We keep an archive of previous Astronomy Pictures of the Day.   Astronomy Picture of the Day is brought to you by  Robert Nemiroff and  Jerry Bonnell . Original material on this page is copyrighted to Robert J. Nemiroff and Jerry T. Bonnell."
        media_type: 
          type: string
          example: "image"
        title: 
          type: string
          example: "Pleiades Star Cluster"
        url: 
          type: string
          example: "https://apod.nasa.gov/apod/image/pleiades2.gif"
    RandomFact:
      type: object
      properties: 
        _id:
          type: string
          example: "aaaf0baf16a3ad1f3cf1edc7"
        fact:
          type: string
          example: "Uranus is named after the Greek mythological figure Ouranos, the God of the sky."
        source:
          type: string
          example: "fungenerators.com"
    Message:
      type: object
      properties:
        message: 
          type: string
  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema: 
            $ref: '#/components/schemas/Message'
          examples: 
            Bad request:
              value:
                message: Bad request
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Message'
          examples: 
            Unauthorized:
              value:
                message: Unauthorized
    FactNotFound:
      description: Fact not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Message'
          examples: 
            Fact not found:
              value:
                message: Fact not found
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Message'
          examples: 
            Internal server error:
              value:
                message: Internal server error
    ServiceNotAvailable:
      description: Service unavailable
      content:
        application/json:
          schema: 
            $ref: '#/components/schemas/Message'
          examples: 
            Houston, we've had a problem:
              value:
                message: Houston, we've had a problem