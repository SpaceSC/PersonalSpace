openapi: 3.0.0
info:
  title: Personal Space
  description: This is the documentation for Personal Space API. In the project, they will need to store and handle users, albums, and images and will have a simple user authentication system (registration, login, logout).
  version: 0.1.9
servers:
  - url: http://localhost:8080
    description: Main (production) server
security:
  - BearerAuth: []
paths:
  /users:
    get:
      summary: Returns a list of users.
      tags:
        - get
      description: Returns a list of users, 10 appearing per page.
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
      responses:
        200:    # status code
          description: A JSON array of user names
          content:
            application/json:
              schema: 
                type: array
                items: 
                  type: string
                example: ['John Doe', 'Bob']
        400:    # status code
          description: Invalid page query parameter
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message: 
                    type: string
                example:
                  message: Invalid page
    post:
      summary: Add a new user as admin
      tags:
        - post
      requestBody:
        description: New user object that you would like to store.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: New user stored in database.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/User'
        400:    # status code
          description: Invalid username
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message: 
                    type: string
              examples:
                InvalidUsername: 
                  value: 
                    message: Invalid username
                NotUniqueUsername: 
                  value: 
                    message: Username must be unique
                
  /users/{username}:
    put:
      summary: Update usernames.
      tags:
        - put
      parameters:
        - name: username
          in: path # the route parameter in this case
          required: true
          schema:
            type: string
      requestBody:
        description: User object to update user.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: New user updated in database.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/User'
        400:    # status code
          description: Invalid username
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message: 
                    type: string
              examples:
                InvalidUsername: 
                  value: 
                    message: Invalid username
                NotUniqueUsername: 
                  value: 
                    message: Username must be unique
                
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  schemas:
    User:
      properties:
        username:
          type: string
          example: 'Jane Doe'