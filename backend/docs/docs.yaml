openapi: 3.0.0
info:
  title: Personal Space
  description: This is the documentation for Personal Space API. In the project, they will need to store and handle users, albums, and images and will have a simple user authentication system (registration, login, logout).
  version: 0.1.9
servers:
  - url: http://localhost:5000/api
    description: Main (production) server
security:
  - BearerAuth: []
paths:
  /test:
    get:
      summary: Returns a test message
      tags:
        - test
      security: []
      description: Returns a test message.
      responses:
        200:    # status code
          description: A JSON with a message
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Message'
              examples: 
                My test endpoint:
                  value:
                      message: My test endpoint
        # 400:    # status code
        #   description: Invalid page query parameter
        #   content:
        #     application/json:
        #       schema: 
        #         type: object
        #         properties:
        #           message: 
        #             type: string
        #         example:
        #           message: Invalid page
  /random-fact:
    get:
      summary: Returns a test message
      tags:
        - randomFact
      # security: []
      # description: Returns a test message.
      responses:
        200:    # status code
          description: A JSON with a message
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Message'
              examples: 
                My test endpoint:
                  value:
                      message: My test endpoint
        # 400:    # status code
        #   description: Invalid page query parameter
        #   content:
        #     application/json:
        #       schema: 
        #         type: object
        #         properties:
        #           message: 
        #             type: string
        #         example:
        #           message: Invalid page
  /random-fact2:
    post:
      summary: Add a new user as admin
      tags:
        - post
      requestBody:
        description: New user object that you would like to store.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: New user stored in database.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/User'
        400:    # status code
          description: Invalid username
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message: 
                    type: string
              examples:
                InvalidUsername: 
                  value: 
                    message: Invalid username
                NotUniqueUsername: 
                  value: 
                    message: Username must be unique
                
  /users/{username}:
    put:
      summary: Update usernames.
      tags:
        - put
      parameters:
        - name: username
          in: path # the route parameter in this case
          required: true
          schema:
            type: string
      requestBody:
        description: User object to update user.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: New user updated in database.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/User'
        400:    # status code
          description: Invalid username
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message: 
                    type: string
              examples:
                InvalidUsername: 
                  value: 
                    message: Invalid username
                NotUniqueUsername: 
                  value: 
                    message: Username must be unique
                
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  schemas:
    User:
      properties:
        username:
          type: string
          example: 'Jane Doe'
    Message:
      type: object
      properties:
        message: 
          type: string